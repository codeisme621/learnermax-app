AWSTemplateFormatVersion: 2010-09-09
Description: >-
  LearnerMax API - Express.js application using aws-lambda-web-adapter
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "prod"
    Description: Environment name (dev or prod)

# Global configuration for all functions
Globals:
  Function:
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  # Single Lambda function running Express.js with aws-lambda-web-adapter
  LearnerMaxApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "learnermax-api-${Environment}"
      Description: LearnerMax API using Express.js and aws-lambda-web-adapter
      CodeUri: .
      Handler: run.sh
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          # Enable aws-lambda-web-adapter
          AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
          # Port for Express app
          PORT: 8080
          # DynamoDB table reference
          SAMPLE_TABLE: !Ref SampleTable
          ENVIRONMENT: !Ref Environment
          # Logging configuration
          AWS_LAMBDA_LOG_LEVEL: INFO
      # Add the Lambda Web Adapter layer
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:22"
      Policies:
        # Give full access to the DynamoDB table
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        # CloudWatch Logs permissions
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
      Events:
        # Catch all requests and let Express handle routing
        ApiRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
        ApiProxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

  # DynamoDB table for storing learning items
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # Application Insights for monitoring
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

  # CloudWatch Alarms for monitoring
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "learnermax-lambda-errors-${Environment}"
      AlarmDescription: "High error rate in LearnerMax Lambda function"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LearnerMaxApiFunction
      TreatMissingData: notBreaching

# Conditions for environment-specific resources
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Outputs:
  # API Gateway endpoint
  WebEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "learnermax-api-endpoint-${Environment}"

  # API Gateway ID for external integrations
  ApiGatewayId:
    Description: API Gateway ID
    Value: !Ref ServerlessRestApi
    Export:
      Name: !Sub "learnermax-api-gateway-id-${Environment}"

  # Lambda function ARN
  LearnerMaxApiFunctionArn:
    Description: LearnerMax API Lambda Function ARN
    Value: !GetAtt LearnerMaxApiFunction.Arn
    Export:
      Name: !Sub "learnermax-api-function-arn-${Environment}"

  # DynamoDB table name
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref SampleTable
    Export:
      Name: !Sub "learnermax-db-table-name-${Environment}"

  # OpenAPI specification URL
  OpenApiSpecUrl:
    Description: URL to the OpenAPI specification
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/openapi.yaml"

  # Environment info
  EnvironmentInfo:
    Description: Deployment environment information
    Value: !Sub |
      Environment: ${Environment}
      Region: ${AWS::Region}
      Stack: ${AWS::StackName}
      API Endpoint: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/